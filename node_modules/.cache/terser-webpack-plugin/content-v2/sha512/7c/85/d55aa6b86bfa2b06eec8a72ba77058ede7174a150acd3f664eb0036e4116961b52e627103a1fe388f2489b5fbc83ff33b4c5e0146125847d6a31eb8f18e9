{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{400:function(a,t,e){\"use strict\";e.r(t);var s=e(54),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[e(\"h2\",{attrs:{id:\"node-js\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#node-js\"}},[a._v(\"#\")]),a._v(\" Node.js\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"node-js开发程序步骤\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#node-js开发程序步骤\"}},[a._v(\"#\")]),a._v(\" node.js开发程序步骤：\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"_1-使用-required调入应用需要用到的模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-使用-required调入应用需要用到的模块\"}},[a._v(\"#\")]),a._v(\" 1.使用 required调入应用需要用到的模块\")]),a._v(\" \"),e(\"p\",[a._v('var http = require(\"http\");')]),a._v(\" \"),e(\"h5\",{attrs:{id:\"_2-创建服务器\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-创建服务器\"}},[a._v(\"#\")]),a._v(\" 2.创建服务器\")]),a._v(\" \"),e(\"p\",[a._v(\"http.createServer().listen(“端口号”)；\\n函数通过 request, response 参数来接收和响应数据。\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"_3-接收请求与响应请求\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-接收请求与响应请求\"}},[a._v(\"#\")]),a._v(\" 3.接收请求与响应请求\")]),a._v(\" \"),e(\"p\",[a._v(\"服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122140539938.png\",alt:\"image-20211122140539938\"}})]),a._v(\" \"),e(\"h4\",{attrs:{id:\"串行-并发-并行\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#串行-并发-并行\"}},[a._v(\"#\")]),a._v(\" 串行 并发 并行\")]),a._v(\" \"),e(\"p\",[a._v(\"串行：在一个时间段之内，只执行一个程序；\\n并发：在一段时间内，同时执行多个程序；\\n并行：在同一时刻，同时执行多个程序；\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"阻塞与非阻塞\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#阻塞与非阻塞\"}},[a._v(\"#\")]),a._v(\" 阻塞与非阻塞\")]),a._v(\" \"),e(\"p\",[a._v(\"阻塞：程序在执行过程中碰到耗时的I/O操作时，程序一直等待I/O操作的完成，才执行I/O操作的下一条指令；\")]),a._v(\" \"),e(\"p\",[a._v(\"非阻塞：程序在执行过程中碰到耗时的I/O操作是，程序不等待I/O操作返回结果，就执行下一条指令；\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"同步i-o-异步i-o\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同步i-o-异步i-o\"}},[a._v(\"#\")]),a._v(\" 同步I/O  异步I/O\")]),a._v(\" \"),e(\"p\",[a._v(\"同步I/O：程序在执行I/O操作时，程序等待I/O的执行结果返回时，才执行其他的逻辑程序；\")]),a._v(\" \"),e(\"p\",[a._v(\"异步I/O：程序在执行过程中碰到耗时的I/O操作是，程序不等待I/O操作返回结果，就执行其他的逻辑程序，I/O操作完成后，会发送事件通知调用I/O的程序，程序收到事件，会调用专门的函数处理。\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"回调函数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回调函数\"}},[a._v(\"#\")]),a._v(\" 回调函数\")]),a._v(\" \"),e(\"p\",[a._v(\"回调函数：在异步I/O用来处理事件的业务逻辑程序，称为回调函数。\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"事件-事件循环\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件-事件循环\"}},[a._v(\"#\")]),a._v(\" 事件 事件循环\")]),a._v(\" \"),e(\"p\",[a._v(\"事件：用户的操作或是程序等待的某一个条件，称为事件；\")]),a._v(\" \"),e(\"p\",[a._v(\"事件循环：在Node.js隐含的一个逻辑，有一个循环，专门用来处理程序中的事件，直到事件队列中再也没有一条事件，循环才结束。事件循环是指node.js会把所有的异步操作使用事件机制解决。\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"Node.js 是单线程，异步I/O,基于事件。\")])]),a._v(\" \"),e(\"p\",[a._v(\"带来的好处：单线程实现了并发，减少了创建了线程与进程的代价；\\n带来的不便：一个逻辑被划分了几个独立的部分，和以前的编程逻辑有所不同。\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"核心模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#核心模块\"}},[a._v(\"#\")]),a._v(\" 核心模块：\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"全局对象\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#全局对象\"}},[a._v(\"#\")]),a._v(\" 全局对象\")]),a._v(\" \"),e(\"p\",[a._v(\"Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以外）都是 global 对象的属性。\")]),a._v(\" \"),e(\"p\",[a._v(\"1、变量：\")]),a._v(\" \"),e(\"p\",[a._v(\"​     __dirname：存放，在node.js中执行的js代码所在的绝对目录。\")]),a._v(\" \"),e(\"p\",[a._v(\"​      __filename：存放，在node.js中执行的js代码所在的文件全路径及文件名。\")]),a._v(\" \"),e(\"p\",[a._v(\"2、全局函数\\nsetTimeout(cb, timedelay);\\nsetIntervals(cb,timedelay);\")]),a._v(\" \"),e(\"p\",[a._v(\"3、node.js对象：\\nconsole\\nprocess\\nmodule\\nBuffer\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"console模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#console模块\"}},[a._v(\"#\")]),a._v(\" console模块\")]),a._v(\" \"),e(\"p\",[a._v(\"console用于控制台标准输出\")]),a._v(\" \"),e(\"p\",[a._v(\"1、log(参数1)；\\nlog（格式符号，参数）；\\n2、error（参数）；\\n3、trace（）；\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"util模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#util模块\"}},[a._v(\"#\")]),a._v(\" Util模块\")]),a._v(\" \"),e(\"p\",[a._v(\"util是一个Node.js核心模块，提供常用函数的集合，包括：格式化字符串、对象的序列化、实现对象继承等常用方法。\")]),a._v(\" \"),e(\"p\",[a._v(\"util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换为字符串的函数，通常用于调试和错误输出。它至少接受一个参数object，即要转换的对象\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"events模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#events模块\"}},[a._v(\"#\")]),a._v(\" events模块\")]),a._v(\" \"),e(\"p\",[a._v(\"1.events模块负责node.js的异步事件处理，在event模块中只有一个对象：EventEmmiter。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122143730918.png\",alt:\"image-20211122143730918\"}})]),a._v(\" \"),e(\"p\",[a._v(\"2.添加事件监听函数:on();\\n事件产生函数：emmit()\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122143753982.png\",alt:\"image-20211122143753982\"}})]),a._v(\" \"),e(\"p\",[a._v(\"3.大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。\")]),a._v(\" \"),e(\"p\",[a._v(\"为什么要这样做呢？原因有两点：\")]),a._v(\" \"),e(\"p\",[a._v(\"首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。\\n其次 JavaScript 的对象机制是基于原型的，支持部分多重继承，继承EventEmitter 不会打乱对象原有的继承关系。\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"文件系统\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文件系统\"}},[a._v(\"#\")]),a._v(\" 文件系统\")]),a._v(\" \"),e(\"p\",[a._v(\"Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 \"),e(\"strong\",[a._v(\"Node 导入文件系统模块(fs)语法为：\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144023666.png\",alt:\"image-20211122144023666\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"异步和同步：\")])]),a._v(\" \"),e(\"p\",[a._v(\"Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。\")]),a._v(\" \"),e(\"p\",[a._v(\"异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。\")]),a._v(\" \"),e(\"p\",[a._v(\"建议使用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144121851.png\",alt:\"image-20211122144121851\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"打开文件：\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144145122.png\",alt:\"image-20211122144145122\"}})]),a._v(\" \"),e(\"p\",[a._v(\"path - 文件的路径。\")]),a._v(\" \"),e(\"p\",[a._v(\"flags - 文件打开的行为。\")]),a._v(\" \"),e(\"p\",[a._v(\"mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)。\")]),a._v(\" \"),e(\"p\",[a._v(\"callback - 回调函数，带有两个参数如： callback(err, fd)。\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"获取文件信息：\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144231851.png\",alt:\"image-20211122144231851\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"写入文件\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144259783.png\",alt:\"image-20211122144259783\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"读取与关闭文件\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144319570.png\",alt:\"image-20211122144319570\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"截取文件\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144340916.png\",alt:\"image-20211122144340916\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"删除文件\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144400881.png\",alt:\"image-20211122144400881\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"目录\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144418435.png\",alt:\"image-20211122144418435\"}})]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144425501.png\",alt:\"image-20211122144425501\"}})]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144434075.png\",alt:\"image-20211122144434075\"}})]),a._v(\" \"),e(\"p\",[a._v(\"path – 文件路径。\\nmode – 设置目录权限，默认为0777。\\ncallback - 回调函数，没有参数。\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"读取目录\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144457653.png\",alt:\"image-20211122144457653\"}})]),a._v(\" \"),e(\"h5\",{attrs:{id:\"path模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#path模块\"}},[a._v(\"#\")]),a._v(\" path模块\")]),a._v(\" \"),e(\"p\",[a._v(\"path 模块提供了一些工具函数，用于处理文件与目录的路径，path 模块的默认操作会根据 Node.js 应用程序运行的操作系统的不同而变化。 比如，当运行在 Windows 操作系统上时，path 模块会认为使用的是 Windows 风格的路径。\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"url模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#url模块\"}},[a._v(\"#\")]),a._v(\" url模块\")]),a._v(\" \"),e(\"p\",[a._v(\"模块的作用：解析用户的URL，以便程序根据URL的不同提供不同的服务；\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"querystring模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#querystring模块\"}},[a._v(\"#\")]),a._v(\" querystring模块\")]),a._v(\" \"),e(\"p\",[a._v(\"querystring 主要对http请求传送的数据进行解析。\")]),a._v(\" \"),e(\"p\",[a._v(\"1、querystring.stringify(obj, [sep], [eq])\\n将JSON对象格式化为查询字符串格式的字符串，默认的分隔符为：“&”和“=”，具体可以看一下以下代码。\")]),a._v(\" \"),e(\"p\",[a._v(\"2、querystring.parse(str, [sep], [eq], [options])\\n根据“&”和“=”将字符串进行分割，反序列化为JSON对象，而options包含的maxKeys默认设置为1000，如果将其设置为0则表示没这个限制。\")]),a._v(\" \"),e(\"h5\",{attrs:{id:\"web模块\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#web模块\"}},[a._v(\"#\")]),a._v(\" web模块\")]),a._v(\" \"),e(\"p\",[a._v(\"Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，Web服务器的基本功能就是提供Web信息浏览服务。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144653345.png\",alt:\"image-20211122144653345\"}})]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144658122.png\",alt:\"image-20211122144658122\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"http.Server是一个基于事件的HTTP服务器\")])]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144719256.png\",alt:\"image-20211122144719256\"}})]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144724280.png\",alt:\"image-20211122144724280\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"http.Server关注的事件\")])]),a._v(\" \"),e(\"p\",[a._v(\"request：当客户端请求到来时，该事件被触发，提供两个参数req和res，表示请求和响应信息，是最常用的事件 。\\nconnection：当TCP连接建立时，该事件被触发，提供一个参数socket，是net.Socket的实例 。\\nclose：当服务器关闭时，触发事件。\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"http.ServerRequest\")])]),a._v(\" \"),e(\"p\",[a._v(\"http.ServerRequest 是 HTTP 请求的信息，是后端开发者最关注的内容。它一般由http.Server 的 request 事件发送，作为第一个参数传递，通常简称 request 或 req 。\")]),a._v(\" \"),e(\"p\",[a._v(\"http请求一般可以分为两部分：请求头和请求体;其提供了3个事件，如下：\\ndata：当请求体数据到来时，该事件被触发，该事件提供一个参数chunk，表示接受的数据，如果该事件没有被监听，则请求体会被抛弃，该事件可能会被调用多次。\\nend：当请求体数据传输完毕时，该事件会被触发，此后不会再有数据 。\\nclose：用户当前请求结束时，该事件被触发，不同于end，如果用户强制终止了传输，也是用close。\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"http.ServerResponse\")])]),a._v(\" \"),e(\"p\",[a._v(\"http.ServerResponse:是返回给客户端的信息，决定了用户最终看到的内容，一般也由http.Server的request事件发送，并作为第二个参数传递，它有三个重要的成员函数\")]),a._v(\" \"),e(\"p\",[a._v(\"res.writeHead(statusCode,[heasers])：向请求的客户端发送响应头，该函数在一个请求中最多调用一次，如果不调用，则会自动生成一个响应头\\nres.write(data,[encoding])：想请求的客户端发送相应内容，data是一个buffer或者字符串，如果data是字符串，则需要制定编码方式，默认为utf-8，在res.end调用之前可以多次调用\\nres.end([data],[encoding])：结束响应，告知客户端所有发送已经结束，当所有要返回的内容发送完毕时，该函数必需被调用一次，两个可选参数与res.write()相同。如果不调用这个函数，客户端将用于处于等待状态。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122144851334.png\",alt:\"image-20211122144851334\"}})]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"http客户端\")])]),a._v(\" \"),e(\"p\",[a._v(\"一个程序向服务器程序发出服务请求，在客户端模块提供了两个函数：http.request() 与http.get()。\")]),a._v(\" \"),e(\"p\",[a._v(\"1、http.request(options,callback)\")]),a._v(\" \"),e(\"p\",[a._v(\"2、http.get(options,callback)\")]),a._v(\" \"),e(\"p\",[a._v(\"差异：get函数是request函数的精简版，get默认采用get方法向服务器发出请求，同时在get方法中也不需要调用同时不需要手动调用req.end()表示消息传递结束。\")]),a._v(\" \"),e(\"p\",[a._v(\"两个函数的返回值都是http.clientRequest对象；\")]),a._v(\" \"),e(\"p\",[a._v(\"host ：请求网站的域名或 IP 地址。\\nport ：请求网站的端口，默认 80。\\nmethod ：请求方法，默认是 GET。\\npath ：请求的相对于根的路径，默认是“ / ”。 QueryString 应该包含在其中。例如 /search?query=byvoid 。\\nheaders ：一个关联数组对象，为请求头的内容。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122145045808.png\",alt:\"image-20211122145045808\"}})]),a._v(\" \"),e(\"h5\",{attrs:{id:\"路由\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#路由\"}},[a._v(\"#\")]),a._v(\" 路由\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"C:%5CUsers%5Czyh11%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211122145136414.png\",alt:\"image-20211122145136414\"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}